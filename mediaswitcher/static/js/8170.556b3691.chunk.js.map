{"version":3,"file":"static/js/8170.556b3691.chunk.js","mappings":"6MAiBA,MAAMA,EAAkB,MACtBC,WAAAA,CAAYC,IACVC,EAAAA,EAAAA,GAAiBC,KAAMF,GACvBE,KAAKC,gBAAaC,EAClBF,KAAKG,YAASD,EACdF,KAAKI,oBAAiBF,EACtBF,KAAKK,aAAUH,CACjB,CACAI,iBAAAA,GACE,IAAIC,EAAgBP,KAAKQ,KAAKR,KAAKC,YAC/BD,KAAKK,UACPE,EAtBN,SAAqBE,GACnB,MAAMC,EAAWD,EAAKE,MAAM,KAC5B,OAAqB,OAAbD,QAAkC,IAAbA,OAAsB,EAASA,EAASE,QAAUH,CACjF,CAmBsBI,CAAYN,IAE9B,IAAIO,EAAcP,EAClB,GAAIP,KAAKG,OAAQ,CACf,MACMY,EAvBZ,SAA4BC,EAAcf,GACxC,MACMgB,GADWC,EAAAA,EAAAA,KACSC,MAAKV,GAAQA,EAAKW,OAASnB,IAC/CoB,GAAkBC,EAAAA,EAAAA,GAA0B,OAAbL,QAAkC,IAAbA,OAAsB,EAASA,EAASM,4BAClG,MAAO,GAAPC,OAAUR,GAAYQ,OAAGH,EAC3B,CAkB8BI,CADHzB,KAAKQ,KAAK,OAC0BR,KAAKC,YAC9Da,EAAc,GAAHU,OAAMjB,EAAa,KAAAiB,OAAIT,GAC9Bf,KAAKI,iBACPU,EAAc,GAAHU,OAAMjB,EAAa,MAAAiB,OAAKT,EAAe,KAEtD,CACA,OAAQW,EAAAA,EAAAA,GAAE,OAAQ,KAAMZ,EAC1B,CACA,uBAAMa,IACJC,EAAAA,EAAAA,GAAe5B,KAAK6B,MACpB7B,KAAKQ,WAAasB,EAAAA,EAAAA,GAAsB9B,KAAK6B,KAAME,EAAAA,EACrD,CACAC,MAAAA,GACE,OAAQN,EAAAA,EAAAA,GAAEO,EAAAA,EAAM,KAAMjC,KAAKM,oBAC7B,CACA,QAAIuB,GAAS,OAAOK,EAAAA,EAAAA,GAAWlC,KAAO,E","sources":["../node_modules/genesys-spark-components/dist/esm/gux-time-zone-beta.entry.js"],"sourcesContent":["import { r as registerInstance, h, H as Host, g as getElement } from './index-816e34d8.js';\nimport { t as trackComponent } from './usage-2c6b0896.js';\nimport { b as buildI18nForComponent } from './index-992b023e.js';\nimport { g as getTimeZoneList, f as formatOffset, t as translationResources } from './time-zone-cf732816.js';\nimport './get-closest-element-1597503c.js';\n\nfunction shortenZone(zone) {\n  const sections = zone.split('/');\n  return (sections === null || sections === void 0 ? void 0 : sections.pop()) || zone;\n}\nfunction getLocalizedOffset(localizedUTC, timeZoneId) {\n  const zoneList = getTimeZoneList();\n  const timeZone = zoneList.find(zone => zone.name === timeZoneId);\n  const formattedOffset = formatOffset(timeZone === null || timeZone === void 0 ? void 0 : timeZone.currentTimeOffsetInMinutes);\n  return `${localizedUTC}${formattedOffset}`;\n}\n\nconst GuxTimeZoneBeta = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.timeZoneId = undefined;\n    this.offset = undefined;\n    this.surroundOffset = undefined;\n    this.shorten = undefined;\n  }\n  renderZoneDisplay() {\n    let localizedZone = this.i18n(this.timeZoneId);\n    if (this.shorten) {\n      localizedZone = shortenZone(localizedZone);\n    }\n    let displayText = localizedZone;\n    if (this.offset) {\n      const localizedUTC = this.i18n('UTC');\n      const localizedOffset = getLocalizedOffset(localizedUTC, this.timeZoneId);\n      displayText = `${localizedZone} ${localizedOffset}`;\n      if (this.surroundOffset) {\n        displayText = `${localizedZone} (${localizedOffset})`;\n      }\n    }\n    return (h(\"span\", null, displayText));\n  }\n  async componentWillLoad() {\n    trackComponent(this.root);\n    this.i18n = await buildI18nForComponent(this.root, translationResources);\n  }\n  render() {\n    return (h(Host, null, this.renderZoneDisplay()));\n  }\n  get root() { return getElement(this); }\n};\n\nexport { GuxTimeZoneBeta as gux_time_zone_beta };\n"],"names":["GuxTimeZoneBeta","constructor","hostRef","registerInstance","this","timeZoneId","undefined","offset","surroundOffset","shorten","renderZoneDisplay","localizedZone","i18n","zone","sections","split","pop","shortenZone","displayText","localizedOffset","localizedUTC","timeZone","getTimeZoneList","find","name","formattedOffset","formatOffset","currentTimeOffsetInMinutes","concat","getLocalizedOffset","h","componentWillLoad","trackComponent","root","buildI18nForComponent","translationResources","render","Host","getElement"],"sourceRoot":""}