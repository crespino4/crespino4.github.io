{"version":3,"file":"static/js/990.cb4f09d4.chunk.js","mappings":"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","sources":["../node_modules/genesys-spark-components/dist/esm/after-next-render-ed0f7dcd.js","../node_modules/genesys-spark-components/dist/esm/gux-month-calendar.entry.js","../node_modules/genesys-spark-components/dist/esm/simulate-native-event-ac69961f.js","../node_modules/genesys-spark-components/dist/esm/year-month-values-1b64c204.js"],"sourcesContent":["function afterNextRender(callback) {\n  requestAnimationFrame(() => requestAnimationFrame(callback));\n}\nfunction afterNextRenderTimeout(callback, delay = 100) {\n  return setTimeout(callback, delay);\n}\n\nexport { afterNextRenderTimeout as a, afterNextRender as b };\n","import { r as registerInstance, h, g as getElement } from './index-816e34d8.js';\nimport { b as buildI18nForComponent, g as getDesiredLocale } from './index-992b023e.js';\nimport { s as simulateNativeEvent } from './simulate-native-event-ac69961f.js';\nimport { b as afterNextRender } from './after-next-render-ed0f7dcd.js';\nimport { g as getYearMonthObject, b as getCurrentISOYearMonth, a as getISOYearMonth } from './year-month-values-1b64c204.js';\nimport './get-closest-element-1597503c.js';\n\nconst changeYear = \"Current year is {currentYear}, Click to change year to {changeYear}\";\nconst translationResources = {\n\tchangeYear: changeYear\n};\n\nconst guxMonthCalendarCss = \".gux-month-calendar{flex-wrap:wrap;width:255px;border:1px solid #b4bccb;border-radius:4px;box-shadow:0 2px 4px rgba(32, 41, 55, 0.24)}.gux-month-calendar .gux-year-header{position:relative;display:flex;align-items:center;justify-content:space-between;height:16px;padding:16px;color:#fdfdfd;background-color:#2a60c8;border-top-left-radius:3px;border-top-right-radius:3px}.gux-month-calendar .gux-year-header button{color:#fdfdfd;cursor:pointer;background:none;border:none;outline:none}.gux-month-calendar .gux-year-header button:focus-visible{border-radius:4px;outline:3px solid #aac9ff;outline-offset:1px;box-shadow:0 0 0 1px #fdfdfd}.gux-month-calendar .gux-year-header button.gux-year-change:disabled{cursor:default;opacity:0.5}.gux-month-calendar .gux-year-header button gux-icon{width:16px;height:16px;pointer-events:none}.gux-month-calendar .gux-year-header .gux-year{font-family:Roboto, sans-serif;font-weight:400;font-weight:700}.gux-month-calendar .gux-months{padding:24px;background-color:#fdfdfd}.gux-month-calendar .gux-months button{width:65px;height:50px;margin:2px;text-align:center;cursor:pointer;background:none;border:none;border-radius:4px;outline:none;font-family:Roboto, sans-serif;font-weight:400;font-size:12px;line-height:20px}.gux-month-calendar .gux-months button:focus-visible{outline:3px solid #aac9ff;outline-offset:1px;box-shadow:0 0 0 1px #fdfdfd}.gux-month-calendar .gux-months button.gux-selected,.gux-month-calendar .gux-months button:hover{color:#fdfdfd;background-color:#2a60c8}.gux-month-calendar .gux-months button:disabled{color:#596373;pointer-events:none;background-color:#fdfdfd}\";\n\nconst GuxMonthCalendar = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.value = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this.year = undefined;\n    this.locale = undefined;\n  }\n  onValueUpdate(newValue) {\n    const { year } = getYearMonthObject(newValue);\n    this.year = year;\n  }\n  /**\n   * Focus a month\n   */\n  // eslint-disable-next-line @typescript-eslint/require-await\n  async guxFocus(iSOYearMonth) {\n    iSOYearMonth = iSOYearMonth || getCurrentISOYearMonth();\n    const { year } = getYearMonthObject(iSOYearMonth);\n    this.year = year;\n    afterNextRender(() => {\n      const target = this.root.shadowRoot.querySelector(`gux-month-list-item[value=\"${iSOYearMonth}\"]`);\n      if (target) {\n        target.focus();\n      }\n    });\n  }\n  async componentWillLoad() {\n    this.i18n = await buildI18nForComponent(this.root, translationResources);\n    this.locale = getDesiredLocale(this.root);\n    if (this.value) {\n      this.year = getYearMonthObject(this.value).year;\n    }\n    else {\n      this.year = getYearMonthObject(getCurrentISOYearMonth()).year;\n    }\n  }\n  updateValue(value) {\n    this.value = value;\n    simulateNativeEvent(this.root, 'input');\n    simulateNativeEvent(this.root, 'change');\n  }\n  isOutOfBounds(value) {\n    return (this.max && this.max < value) || (this.min && this.min > value);\n  }\n  onMonthClick(value) {\n    if (this.isOutOfBounds(value)) {\n      return;\n    }\n    this.updateValue(value);\n  }\n  getMonthAriaLabel(value) {\n    const { year, month } = getYearMonthObject(value);\n    return new Date(Number(year), Number(month) - 1).toLocaleDateString(this.locale, { year: 'numeric', month: 'long' });\n  }\n  getYearLabel(year) {\n    return new Date(Number(year), 5).toLocaleDateString(this.locale, {\n      year: 'numeric'\n    });\n  }\n  isSelectedMonth(value) {\n    return value === this.value;\n  }\n  isAriaSelectedMonth(value) {\n    if (this.isSelectedMonth(value)) {\n      return 'true';\n    }\n    return false;\n  }\n  changeYear(increment) {\n    this.year = (parseInt(this.year) + increment).toString();\n  }\n  isPreviousYearLessThanMinYear(year, minISOYearMonth) {\n    return ((parseInt(year) - 1).toString() <\n      (minISOYearMonth && getYearMonthObject(minISOYearMonth).year));\n  }\n  isNextYearGreaterThanMaxYear(year, maxISOYearMonth) {\n    return ((parseInt(year) + 1).toString() >\n      (maxISOYearMonth && getYearMonthObject(maxISOYearMonth).year));\n  }\n  getMonthShortName(year, month) {\n    return new Date(Number(year), Number(month) - 1).toLocaleDateString(this.locale, { month: 'short' });\n  }\n  doFocusTrap() {\n    if (!this.previousYearElement.disabled) {\n      this.previousYearElement.focus();\n    }\n    if (!this.nextYearElement.disabled) {\n      this.nextYearElement.focus();\n    }\n    this.monthListElement.focus();\n  }\n  renderHeader() {\n    return (h(\"div\", { class: \"gux-year-header\" }, h(\"button\", { type: \"button\", class: \"gux-year-change\", onClick: () => this.changeYear(-1), disabled: this.isPreviousYearLessThanMinYear(this.year, this.min), ref: (el) => (this.previousYearElement = el) }, h(\"gux-icon\", { \"icon-name\": \"chevron-small-left\", \"screenreader-text\": this.i18n('changeYear', {\n        currentYear: parseInt(this.year),\n        changeYear: parseInt(this.year) - 1\n      }) })), h(\"div\", { class: \"gux-year\" }, this.getYearLabel(this.year)), h(\"button\", { type: \"button\", class: \"gux-year-change\", onClick: () => this.changeYear(1), disabled: this.isNextYearGreaterThanMaxYear(this.year, this.max), ref: (el) => (this.nextYearElement = el) }, h(\"gux-icon\", { \"icon-name\": \"chevron-small-right\", \"screenreader-text\": this.i18n('changeYear', {\n        currentYear: parseInt(this.year),\n        changeYear: parseInt(this.year) + 1\n      }) }))));\n  }\n  renderMonths() {\n    const monthButtons = Array.from(new Array(12), (_, i) => String(i + 1).padStart(2, '0')).map(month => {\n      const value = getISOYearMonth(this.year, month);\n      return (h(\"gux-month-list-item\", { value: value, selected: this.isSelectedMonth(value), \"aria-selected\": this.isAriaSelectedMonth(value), \"aria-label\": this.getMonthAriaLabel(value), onClick: () => this.onMonthClick(value), disabled: this.isOutOfBounds(value) }, this.getMonthShortName(this.year, month)));\n    });\n    return (h(\"gux-month-list\", { tabIndex: 1, ref: (el) => (this.monthListElement = el) }, monthButtons));\n  }\n  renderTrapFocusEl() {\n    return (h(\"span\", { onFocus: () => this.doFocusTrap(), tabindex: \"0\" }));\n  }\n  render() {\n    return (h(\"div\", { class: \"gux-month-calendar\" }, this.renderHeader(), this.renderMonths(), this.renderTrapFocusEl()));\n  }\n  static get delegatesFocus() { return true; }\n  get root() { return getElement(this); }\n  static get watchers() { return {\n    \"value\": [\"onValueUpdate\"]\n  }; }\n};\nGuxMonthCalendar.style = guxMonthCalendarCss;\n\nexport { GuxMonthCalendar as gux_month_calendar };\n","function simulateNativeEvent(targetElement, nativeEventName) {\n  switch (nativeEventName) {\n    case 'change':\n      return targetElement.dispatchEvent(new InputEvent('change', {\n        bubbles: true\n      }));\n    case 'input':\n      return targetElement.dispatchEvent(new InputEvent('input', {\n        bubbles: true\n      }));\n  }\n}\n\nexport { simulateNativeEvent as s };\n","function getISOYearMonth(year, month) {\n  return `${year}-${month}`;\n}\nfunction getYearMonthObject(yearMonthString) {\n  const [year, month] = yearMonthString.split('-');\n  return { year, month };\n}\nfunction getCurrentISOYearMonth() {\n  const newDate = new Date();\n  const year = newDate.getFullYear().toString();\n  const month = (newDate.getMonth() + 1).toString().padStart(2, '0');\n  return getISOYearMonth(year, month);\n}\n\nexport { getISOYearMonth as a, getCurrentISOYearMonth as b, getYearMonthObject as g };\n"],"names":["afterNextRender","callback","requestAnimationFrame","afterNextRenderTimeout","setTimeout","arguments","length","undefined","translationResources","changeYear","GuxMonthCalendar","constructor","hostRef","registerInstance","this","value","min","max","year","locale","onValueUpdate","newValue","getYearMonthObject","guxFocus","iSOYearMonth","getCurrentISOYearMonth","target","root","shadowRoot","querySelector","concat","focus","componentWillLoad","i18n","buildI18nForComponent","getDesiredLocale","updateValue","simulateNativeEvent","isOutOfBounds","onMonthClick","getMonthAriaLabel","month","Date","Number","toLocaleDateString","getYearLabel","isSelectedMonth","isAriaSelectedMonth","increment","parseInt","toString","isPreviousYearLessThanMinYear","minISOYearMonth","isNextYearGreaterThanMaxYear","maxISOYearMonth","getMonthShortName","doFocusTrap","previousYearElement","disabled","nextYearElement","monthListElement","renderHeader","h","class","type","onClick","ref","el","currentYear","renderMonths","monthButtons","Array","from","_","i","String","padStart","map","getISOYearMonth","selected","tabIndex","renderTrapFocusEl","onFocus","tabindex","render","delegatesFocus","getElement","watchers","style","targetElement","nativeEventName","dispatchEvent","InputEvent","bubbles","yearMonthString","split","newDate","getFullYear","getMonth"],"sourceRoot":""}