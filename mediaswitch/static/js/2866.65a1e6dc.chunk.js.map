{"version":3,"file":"static/js/2866.65a1e6dc.chunk.js","mappings":"qLAGA,MAEMA,EAAe,MACnBC,WAAAA,CAAYC,IACVC,EAAAA,EAAAA,GAAiBC,KAAMF,GACvBE,KAAKC,kBAAmBC,EAAAA,EAAAA,GAAYF,KAAM,mBAAoB,GAC9DA,KAAKG,mBAAoBD,EAAAA,EAAAA,GAAYF,KAAM,oBAAqB,GAChEA,KAAKI,UAAW,EAChBJ,KAAKK,UAAW,EAChBL,KAAKM,mBAAoB,CAC3B,CACAC,iBAAAA,GACEP,KAAKQ,uBAAwBC,EAAAA,EAAAA,GAAWT,KAAKU,uBAAwBV,KAAKW,uBAAuB,IAAMX,KAAKY,kBAAkB,CAC5HC,gBAAgB,EAChBC,eAAe,EACfC,gBAAgB,EAChBC,gBAAgB,GAEpB,CACAJ,cAAAA,GACE,GAAIZ,KAAKU,wBAA0BV,KAAKW,sBAAuB,CAC7D,MAAMM,EAAiBjB,KAAKM,mBACvBY,EAAAA,EAAAA,GAAgBlB,KAAKU,uBAAwBV,KAAKW,sBAAuB,CAC5EQ,SAAU,QACVC,UAAW,eACXC,WAAY,EACVC,EAAAA,EAAAA,GAAO,IACPC,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,GAAK,CACHC,KAAAA,CAAKC,GAAsB,IAArB,MAAEC,EAAK,SAAEC,GAAUF,EACnBT,EACFY,OAAOC,OAAOF,EAASG,SAASC,MAAO,CACrCC,SAAU,GAAFC,OAAKP,EAAMQ,UAAUC,MAAK,QAIpCP,OAAOC,OAAOF,EAASG,SAASC,MAAO,CACrCI,MAAO,GAAFF,OAAKP,EAAMQ,UAAUC,MAAK,MAC/BC,SAAU,UAGhB,KAEFC,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,QAEDC,MAAKC,IAA8B,IAA7B,EAAEC,EAAC,EAAEC,EAAC,eAAEC,GAAgBH,EAC/B,MAAM,gBAAEI,GAAoBD,EAAeL,KAC3CV,OAAOC,OAAO9B,KAAKW,sBAAsBqB,MAAO,CAC9Cc,KAAM,GAAFZ,OAAKQ,EAAC,MACVK,IAAK,GAAFb,OAAKS,EAAC,QAEXE,EACI7C,KAAKW,sBAAsBqC,UAAUC,IAAI,oBACzCjD,KAAKW,sBAAsBqC,UAAUE,OAAO,mBAAmB,GAEvE,CACF,CACAC,gBAAAA,CAAiB/C,GACXA,EACFJ,KAAKC,iBAAiBmD,OAGtBpD,KAAKG,kBAAkBiD,MAE3B,CACAC,gBAAAA,GACMrD,KAAKI,UACPJ,KAAKO,mBAET,CACA+C,kBAAAA,GACMtD,KAAKI,SACPJ,KAAKO,oBAEEP,KAAKQ,uBACZR,KAAKQ,uBAET,CACA+C,oBAAAA,GACMvD,KAAKQ,uBACPR,KAAKQ,uBAET,CACAgD,MAAAA,GACE,OAAQC,EAAAA,EAAAA,GAAE,MAAO,CAAEC,MAAO,CACtB,wBAAwB,EACxB,eAAgB1D,KAAKK,UACpBsD,IAAMC,GAAQ5D,KAAKU,uBAAyBkD,IAAOH,EAAAA,EAAAA,GAAE,OAAQ,CAAEI,KAAM,YAAaJ,EAAAA,EAAAA,GAAE,MAAO,CAAEC,MAAO,CACrG,uBAAuB,EACvB,eAAgB1D,KAAKI,WAAaJ,KAAKK,UACtCsD,IAAMC,GAAQ5D,KAAKW,sBAAwBiD,IAAOH,EAAAA,EAAAA,GAAE,OAAQ,CAAEI,KAAM,WAC3E,CACA,mBAAWC,GAAa,MAAO,CAC7B,SAAY,CAAC,oBACZ,GAELlE,EAAaoC,MAjGW,iZ","sources":["../node_modules/genesys-spark-components/dist/esm/gux-popup-beta.entry.js"],"sourcesContent":["import { r as registerInstance, c as createEvent, h } from './index-816e34d8.js';\nimport { a as autoUpdate, c as computePosition, o as offset, f as flip, d as size, s as shift, h as hide } from './floating-ui.dom.esm-483496c9.js';\n\nconst guxPopupBetaCss = \".gux-target-container.gux-disabled{pointer-events:none;cursor:default;opacity:0.5}.gux-popup-container{position:fixed;z-index:var(--gux-zindex-popup, 1);width:max-content;visibility:hidden}.gux-popup-container.gux-expanded{visibility:visible}.gux-sr-only-clip:not(:focus):not(:active){position:absolute;width:1px;height:1px;overflow:hidden;clip:rect(0 0 0 0);clip-path:inset(50%);white-space:nowrap}\";\n\nconst GuxPopupBeta = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.internalexpanded = createEvent(this, \"internalexpanded\", 7);\n    this.internalcollapsed = createEvent(this, \"internalcollapsed\", 7);\n    this.expanded = false;\n    this.disabled = false;\n    this.exceedTargetWidth = false;\n  }\n  runUpdatePosition() {\n    this.cleanupUpdatePosition = autoUpdate(this.targetElementContainer, this.popupElementContainer, () => this.updatePosition(), {\n      ancestorScroll: true,\n      elementResize: true,\n      animationFrame: true,\n      ancestorResize: true\n    });\n  }\n  updatePosition() {\n    if (this.targetElementContainer && this.popupElementContainer) {\n      const assignMinWidth = this.exceedTargetWidth;\n      void computePosition(this.targetElementContainer, this.popupElementContainer, {\n        strategy: 'fixed',\n        placement: 'bottom-start',\n        middleware: [\n          offset(2),\n          flip(),\n          size({\n            apply({ rects, elements }) {\n              if (assignMinWidth) {\n                Object.assign(elements.floating.style, {\n                  minWidth: `${rects.reference.width}px`\n                });\n              }\n              else {\n                Object.assign(elements.floating.style, {\n                  width: `${rects.reference.width}px`,\n                  overflow: 'hidden'\n                });\n              }\n            }\n          }),\n          shift(),\n          hide()\n        ]\n      }).then(({ x, y, middlewareData }) => {\n        const { referenceHidden } = middlewareData.hide;\n        Object.assign(this.popupElementContainer.style, {\n          left: `${x}px`,\n          top: `${y}px`\n        });\n        referenceHidden\n          ? this.popupElementContainer.classList.add('gux-sr-only-clip')\n          : this.popupElementContainer.classList.remove('gux-sr-only-clip');\n      });\n    }\n  }\n  onExpandedChange(expanded) {\n    if (expanded) {\n      this.internalexpanded.emit();\n    }\n    else {\n      this.internalcollapsed.emit();\n    }\n  }\n  componentDidLoad() {\n    if (this.expanded) {\n      this.runUpdatePosition();\n    }\n  }\n  componentDidUpdate() {\n    if (this.expanded) {\n      this.runUpdatePosition();\n    }\n    else if (this.cleanupUpdatePosition) {\n      this.cleanupUpdatePosition();\n    }\n  }\n  disconnectedCallback() {\n    if (this.cleanupUpdatePosition) {\n      this.cleanupUpdatePosition();\n    }\n  }\n  render() {\n    return (h(\"div\", { class: {\n        'gux-target-container': true,\n        'gux-disabled': this.disabled\n      }, ref: (el) => (this.targetElementContainer = el) }, h(\"slot\", { name: \"target\" }), h(\"div\", { class: {\n        'gux-popup-container': true,\n        'gux-expanded': this.expanded && !this.disabled\n      }, ref: (el) => (this.popupElementContainer = el) }, h(\"slot\", { name: \"popup\" }))));\n  }\n  static get watchers() { return {\n    \"expanded\": [\"onExpandedChange\"]\n  }; }\n};\nGuxPopupBeta.style = guxPopupBetaCss;\n\nexport { GuxPopupBeta as gux_popup_beta };\n"],"names":["GuxPopupBeta","constructor","hostRef","registerInstance","this","internalexpanded","createEvent","internalcollapsed","expanded","disabled","exceedTargetWidth","runUpdatePosition","cleanupUpdatePosition","autoUpdate","targetElementContainer","popupElementContainer","updatePosition","ancestorScroll","elementResize","animationFrame","ancestorResize","assignMinWidth","computePosition","strategy","placement","middleware","offset","flip","size","apply","_ref","rects","elements","Object","assign","floating","style","minWidth","concat","reference","width","overflow","shift","hide","then","_ref2","x","y","middlewareData","referenceHidden","left","top","classList","add","remove","onExpandedChange","emit","componentDidLoad","componentDidUpdate","disconnectedCallback","render","h","class","ref","el","name","watchers"],"sourceRoot":""}