{"version":3,"file":"static/js/3128.ecb2fe8f.chunk.js","mappings":"sLAGA,MAEMA,EAAgB,MACpBC,WAAAA,CAAYC,IACVC,EAAAA,EAAAA,GAAiBC,KAAMF,GACvBE,KAAKC,WAAQC,EACbF,KAAKG,cAAWD,EAChBF,KAAKI,gBAAaF,EAClBF,KAAKK,eAAYH,EACjBF,KAAKM,QAAS,EACdN,KAAKO,UAAW,EAChBP,KAAKQ,UAAW,EAChBR,KAAKS,UAAW,EAChBT,KAAKU,SAAU,CACjB,CACAC,YAAAA,GACEX,KAAKU,SAAU,CACjB,CACAE,YAAAA,GACEZ,KAAKU,SAAU,CACjB,CACAG,YAAAA,CAAaP,GACX,IAAIQ,EAAIC,EACJT,EACoC,QAA/BQ,EAAKd,KAAKgB,uBAAoC,IAAPF,GAAyBA,EAAGG,iBAGpC,QAA/BF,EAAKf,KAAKgB,uBAAoC,IAAPD,GAAyBA,EAAGG,gBAE9E,CACAC,iBAAAA,GACEnB,KAAKoB,KAAKC,GAAKrB,KAAKoB,KAAKC,KAAMC,EAAAA,EAAAA,GAAa,kBAC9C,CACAC,eAAAA,GACE,OAAIvB,KAAKQ,WAGFR,KAAKO,SAAW,OAAS,QAClC,CACAiB,MAAAA,GACE,IAAIC,EAAY,KAMhB,OAHuB,OAAnBzB,KAAKK,WAAwBL,KAAKU,SAAWV,KAAKM,SACpDmB,EAAY,CAAEC,MAAO1B,KAAKK,aAEpBsB,EAAAA,EAAAA,GAAEC,EAAAA,EAAM,CAAEC,KAAM,SAAUC,MAAO,CACrC,aAAc9B,KAAKM,OACnB,eAAgBN,KAAKQ,SACrB,eAAgBR,KAAKS,SACrB,cAAeT,KAAKU,QACpB,eAAgBV,KAAKO,UACpB,gBAAiBP,KAAKuB,kBAAmB,gBAAiBvB,KAAKQ,SAASuB,aAAcJ,EAAAA,EAAAA,GAAE,WAAY,CAAEK,WAA+B,MAAnBhC,KAAKI,WAAoB,oBAAqBJ,KAAKI,WAAY,YAAaJ,KAAKG,SAAU8B,MAAOR,KAAcE,EAAAA,EAAAA,GAAE,oBAAqB,CAAEO,IAAKC,GAAOnC,KAAKgB,gBAAkBmB,IAAOR,EAAAA,EAAAA,GAAE,OAAQ,OACtT,CACA,QAAIP,GAAS,OAAOgB,EAAAA,EAAAA,GAAWpC,KAAO,CACtC,mBAAWqC,GAAa,MAAO,CAC7B,OAAU,CAAC,gBACV,GAELzC,EAAcqC,MA3DW,ooB,iBCHzB,SAASX,IACP,MAAO,GAAPgB,OAD0BC,UAAAC,OAAA,QAAAtC,IAAAqC,UAAA,GAAAA,UAAA,GAAG,MACb,KAAAD,OAAIG,KAAKC,SAASX,SAAS,IAAIY,OAAO,EAAG,IAC3D,C","sources":["../node_modules/genesys-spark-components/dist/esm/gux-option-icon.entry.js","../node_modules/genesys-spark-components/dist/esm/random-html-id-8e3f658c.js"],"sourcesContent":["import { r as registerInstance, h, H as Host, g as getElement } from './index-816e34d8.js';\nimport { r as randomHTMLId } from './random-html-id-8e3f658c.js';\n\nconst guxOptionIconCss = \"gux-option-icon{box-sizing:border-box;display:flex;height:32px;padding:6px 8px;color:#2e394c;word-wrap:break-word;cursor:pointer;align-items:flex-start}gux-option-icon.gux-disabled{pointer-events:none;cursor:default;opacity:0.5}gux-option-icon.gux-selected{background:#deeaff}gux-option-icon.gux-active,gux-option-icon.gux-hovered:not(:disabled){color:#fdfdfd;background:#2a60c8}gux-option-icon.gux-filtered{display:none}gux-option-icon .gux-slot-container{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}gux-option-icon gux-icon{flex-shrink:0;width:16px;height:16px;margin-block-start:calc((20px - 16px) / 2);margin-inline-end:8px}\";\n\nconst GuxOptionIcon = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.value = undefined;\n    this.iconName = undefined;\n    this.iconSrText = undefined;\n    this.iconColor = undefined;\n    this.active = false;\n    this.selected = false;\n    this.disabled = false;\n    this.filtered = false;\n    this.hovered = false;\n  }\n  onmouseenter() {\n    this.hovered = true;\n  }\n  onMouseleave() {\n    this.hovered = false;\n  }\n  handleActive(active) {\n    var _a, _b;\n    if (active) {\n      void ((_a = this.truncateElement) === null || _a === void 0 ? void 0 : _a.setShowTooltip());\n    }\n    else {\n      void ((_b = this.truncateElement) === null || _b === void 0 ? void 0 : _b.setHideTooltip());\n    }\n  }\n  componentWillLoad() {\n    this.root.id = this.root.id || randomHTMLId('gux-option-icon');\n  }\n  getAriaSelected() {\n    if (this.disabled) {\n      return false;\n    }\n    return this.selected ? 'true' : 'false';\n  }\n  render() {\n    let iconStyle = null;\n    // If the icon color is set and we don't have a background highlight that\n    // might cause contrast problems, set the color style.\n    if (this.iconColor !== null && !(this.hovered || this.active)) {\n      iconStyle = { color: this.iconColor };\n    }\n    return (h(Host, { role: \"option\", class: {\n        'gux-active': this.active,\n        'gux-disabled': this.disabled,\n        'gux-filtered': this.filtered,\n        'gux-hovered': this.hovered,\n        'gux-selected': this.selected\n      }, \"aria-selected\": this.getAriaSelected(), \"aria-disabled\": this.disabled.toString() }, h(\"gux-icon\", { decorative: this.iconSrText == null, \"screenreader-text\": this.iconSrText, \"icon-name\": this.iconName, style: iconStyle }), h(\"gux-truncate-beta\", { ref: el => (this.truncateElement = el) }, h(\"slot\", null))));\n  }\n  get root() { return getElement(this); }\n  static get watchers() { return {\n    \"active\": [\"handleActive\"]\n  }; }\n};\nGuxOptionIcon.style = guxOptionIconCss;\n\nexport { GuxOptionIcon as gux_option_icon };\n","function randomHTMLId(prefix = 'gux') {\n  return `${prefix}-${Math.random().toString(36).substr(2, 10)}`;\n}\n\nexport { randomHTMLId as r };\n"],"names":["GuxOptionIcon","constructor","hostRef","registerInstance","this","value","undefined","iconName","iconSrText","iconColor","active","selected","disabled","filtered","hovered","onmouseenter","onMouseleave","handleActive","_a","_b","truncateElement","setShowTooltip","setHideTooltip","componentWillLoad","root","id","randomHTMLId","getAriaSelected","render","iconStyle","color","h","Host","role","class","toString","decorative","style","ref","el","getElement","watchers","concat","arguments","length","Math","random","substr"],"sourceRoot":""}