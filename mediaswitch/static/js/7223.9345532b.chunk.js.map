{"version":3,"file":"static/js/7223.9345532b.chunk.js","mappings":"kQAIA,MAOMA,EAAwB,CAC7BC,KARY,OASZC,WARkB,2BASlBC,MARa,QASbC,SARgB,WAShBC,KARY,OASZC,KARY,OASZC,eARsB,sDAWvB,MAAMC,EACJ,kBAAOC,CAAYC,EAAaR,GAC9B,GAAIA,GAAc,GAChB,MAAO,IAAIS,MAAMT,GAAYU,QAAQC,KAAIC,IACvC,MAAMC,EAAaD,EAAQ,EAC3B,MAAO,CACLC,aACAC,QAASC,OAAOF,GAChBG,QAASH,IAAeL,EACzB,IAGL,GAAIA,GAAe,EAAG,CASpB,MAAO,IARe,IAAIC,MAAM,GAAGC,QAAQC,KAAIC,IAC7C,MAAMC,EAAaD,EAAQ,EAC3B,MAAO,CACLC,aACAC,QAASC,OAAOF,GAChBG,QAASH,IAAeL,EACzB,IAID,CACEK,WAAY,EACZC,QAAS,MACTE,SAAS,GAEX,CACEH,WAAYb,EACZc,QAASC,OAAOf,GAChBgB,SAAS,GAGf,CACA,GAAIR,EAAcR,EAAa,EAAG,CAChC,MAAMiB,EAAc,IAAIR,MAAM,GAAGC,QAAQC,KAAIC,IAC3C,MAAMC,EAAaD,EAAQZ,EAAa,EACxC,MAAO,CACLa,aACAC,QAASC,OAAOF,GAChBG,QAASH,IAAeL,EACzB,IAEH,MAAO,CACL,CACEK,WAAY,EACZC,QAAS,IACTE,SAAS,GAEX,CACEH,WAAYb,EAAa,EACzBc,QAAS,MACTE,SAAS,MAERC,EAEP,CACA,MAAMC,EAAiB,IAAIT,MAAM,GAAGC,QAAQC,KAAIC,IAC9C,MAAMC,EAAaD,EAAQJ,EAAc,EACzC,MAAO,CACLK,aACAC,QAASC,OAAOF,GAChBG,QAASH,IAAeL,EACzB,IAEH,MAAO,CACL,CACEK,WAAY,EACZC,QAAS,IACTE,SAAS,GAEX,CACEH,WAAYL,EAAc,EAC1BM,QAAS,MACTE,SAAS,MAERE,EACH,CACEL,WAAYL,EAAc,EAC1BM,QAAS,MACTE,SAAS,GAEX,CACEH,WAAYb,EACZc,QAASC,OAAOf,GAChBgB,SAAS,GAGf,EAGF,MAEMG,EAAuB,MAC3BC,WAAAA,CAAYC,IACVC,EAAAA,EAAAA,GAAiBC,KAAMF,GACvBE,KAAKC,2BAA4BC,EAAAA,EAAAA,GAAYF,KAAM,4BAA6B,GAChFA,KAAKf,iBAAckB,EACnBH,KAAKvB,gBAAa0B,EAClBH,KAAKI,OAAS,MAChB,CACA,eAAIC,GACF,OAAOL,KAAKf,aAAe,CAC7B,CACA,cAAIqB,GACF,OAAON,KAAKf,aAAee,KAAKvB,UAClC,CACA8B,gBAAAA,GACEP,KAAKC,0BAA0BO,KAAK,EACtC,CACAC,mBAAAA,GACET,KAAKC,0BAA0BO,KAAKR,KAAKf,YAAc,EACzD,CACAyB,eAAAA,GACEV,KAAKC,0BAA0BO,KAAKR,KAAKf,YAAc,EACzD,CACA0B,eAAAA,GACEX,KAAKC,0BAA0BO,KAAKR,KAAKvB,WAC3C,CACAmC,eAAAA,CAAgBtB,GACdU,KAAKC,0BAA0BO,KAAKlB,EACtC,CACAuB,gBAAAA,CAAiBC,GACf,MAAMtC,EAAOuC,SAASD,EAAO,KACxBtC,GAAQwC,MAAMxC,GACjBwB,KAAKiB,aAAaH,MAAQtB,OAAOQ,KAAKf,aAGtCe,KAAKC,0BAA0BO,KAAKhC,EAExC,CACA0C,mBAAAA,CAAoBjC,EAAaR,GAC/B,OAAOM,EAA4BC,YAAYC,EAAaR,GAAY0C,QAAO,CAACC,EAAKC,IAC/EA,EAAG5B,QACE2B,EAAIE,QAAQC,EAAAA,EAAAA,GAAE,SAAU,CAAEC,MAAO,kDAAoDH,EAAG9B,UAE1F6B,EAAIE,QAAQC,EAAAA,EAAAA,GAAE,SAAU,CAAEC,MAAO,gDAAiDC,QAASA,IAAMzB,KAAKY,gBAAgBS,EAAG/B,aAAe+B,EAAG9B,WACjJ,GACL,CACAmC,kBAAAA,GACE,OAAQH,EAAAA,EAAAA,GAAE,MAAO,CAAEC,MAAO,iCAC5B,CACAG,qBAAAA,GACE,OAAQJ,EAAAA,EAAAA,GAAE,MAAO,CAAEC,MAAO,yCAA2CxB,KAAKkB,oBAAoBlB,KAAKf,YAAae,KAAKvB,YACvH,CACAmD,iBAAAA,GACE,OAAQL,EAAAA,EAAAA,GAAE,MAAO,CAAEC,MAAO,2CAA4CD,EAAAA,EAAAA,GAAE,MAAO,KAAMvB,KAAK6B,KAAK,UAAUN,EAAAA,EAAAA,GAAE,MAAO,CAAEC,MAAO,iCAAkCD,EAAAA,EAAAA,GAAE,2BAA4B,CAAE,iBAAkB,iBAAkBA,EAAAA,EAAAA,GAAE,QAAS,CAAEO,KAAM,SAAW9B,KAAK6B,KAAK,iBAAkB,CACzR5C,YAAae,KAAKf,YAClBR,WAAYuB,KAAKvB,eACd8C,EAAAA,EAAAA,GAAE,QAAS,CAAEQ,KAAM,OAAQD,KAAM,QAAShB,MAAOtB,OAAOQ,KAAKf,aAAc+C,IAAKA,GAAQhC,KAAKiB,aAAee,EAAMC,SAAUA,IAAMjC,KAAKa,iBAAiBb,KAAKiB,aAAaH,YAAaS,EAAAA,EAAAA,GAAE,MAAO,KAAMvB,KAAK6B,KAAK,aAAc,CAAEpD,WAAYuB,KAAKvB,cACxP,CACAyD,aAAAA,CAAc9B,GACZ,MAAe,UAAXA,EACKJ,KAAK0B,qBAEC,aAAXtB,EACKJ,KAAK2B,wBAEP3B,KAAK4B,mBACd,CACA,uBAAMO,GACJnC,KAAK6B,WAAaO,EAAAA,EAAAA,GAAsBpC,KAAKqC,KAAM9D,EACrD,CACA+D,MAAAA,GACE,OAAQf,EAAAA,EAAAA,GAAE,MAAO,CAAEC,MAAO,wCAAFF,OAA0CtB,KAAKI,UAAYmB,EAAAA,EAAAA,GAAE,MAAO,CAAEC,MAAO,iCAAkCD,EAAAA,EAAAA,GAAE,uBAAwB,CAAEgB,OAAQ,cAAehB,EAAAA,EAAAA,GAAE,SAAU,CAAEiB,MAAOxC,KAAK6B,KAAK,SAAUY,SAAUzC,KAAKK,YAAaoB,QAASzB,KAAKO,iBAAiBmC,KAAK1C,QAASuB,EAAAA,EAAAA,GAAE,WAAY,CAAEoB,YAAY,EAAM,YAAa,2BAA4BpB,EAAAA,EAAAA,GAAE,uBAAwB,CAAEgB,OAAQ,cAAehB,EAAAA,EAAAA,GAAE,SAAU,CAAEiB,MAAOxC,KAAK6B,KAAK,YAAaY,SAAUzC,KAAKK,YAAaoB,QAASzB,KAAKS,oBAAoBiC,KAAK1C,QAASuB,EAAAA,EAAAA,GAAE,WAAY,CAAEoB,YAAY,EAAM,YAAa,0BAA4B3C,KAAKkC,cAAclC,KAAKI,SAASmB,EAAAA,EAAAA,GAAE,MAAO,CAAEC,MAAO,iCAAkCD,EAAAA,EAAAA,GAAE,uBAAwB,CAAEgB,OAAQ,cAAehB,EAAAA,EAAAA,GAAE,SAAU,CAAEiB,MAAOxC,KAAK6B,KAAK,QAASY,SAAUzC,KAAKM,WAAYmB,QAASzB,KAAKU,gBAAgBgC,KAAK1C,QAASuB,EAAAA,EAAAA,GAAE,WAAY,CAAEoB,YAAY,EAAM,YAAa,2BAA4BpB,EAAAA,EAAAA,GAAE,uBAAwB,CAAEgB,OAAQ,cAAehB,EAAAA,EAAAA,GAAE,SAAU,CAAEiB,MAAOxC,KAAK6B,KAAK,QAASY,SAAUzC,KAAKM,WAAYmB,QAASzB,KAAKW,gBAAgB+B,KAAK1C,QAASuB,EAAAA,EAAAA,GAAE,WAAY,CAAEoB,YAAY,EAAM,YAAa,4BACloC,CACA,QAAIN,GAAS,OAAOO,EAAAA,EAAAA,GAAW5C,KAAO,GAExCJ,EAAqBiD,MA7EW,k6EA+EhC,MAEMC,EAAwB,CAC7BC,iBAHwB,2CAIxBC,WAHkB,4BAQbC,EAA0B,MAC9BpD,WAAAA,CAAYC,IACVC,EAAAA,EAAAA,GAAiBC,KAAMF,GACvBE,KAAKgD,WAAa,EAClBhD,KAAKf,YAAc,EACnBe,KAAKkD,aAAe,EACtB,CACA,aAAIC,GACF,OAAInD,KAAKgD,WAAa,EACb,GAEDhD,KAAKf,YAAc,GAAKe,KAAKkD,aAAe,CACtD,CACA,YAAIE,GACF,OAAIpD,KAAKgD,WAAa,EACb,EAEFK,KAAKC,IAAItD,KAAKf,YAAce,KAAKkD,aAAclD,KAAKgD,WAC7D,CACA,uBAAMb,GACJnC,KAAK6B,WAAaO,EAAAA,EAAAA,GAAsBpC,KAAKqC,KAAMS,EACrD,CACAR,MAAAA,GACE,OAAQf,EAAAA,EAAAA,GAAE,MAAO,CAAEC,MAAO,yCAA0CD,EAAAA,EAAAA,GAAE,OAAQ,CAAEC,MAAO,oCAAsCxB,KAAK6B,KAAK,mBAAoB,CACzJsB,UAAWnD,KAAKmD,UAChBC,SAAUpD,KAAKoD,aACZ7B,EAAAA,EAAAA,GAAE,OAAQ,KAAMvB,KAAK6B,KAAK,aAAc,CAAEmB,WAAYhD,KAAKgD,cAClE,CACA,QAAIX,GAAS,OAAOO,EAAAA,EAAAA,GAAW5C,KAAO,GAExCiD,EAAwBJ,MAhCW,oPAkCnC,MAGMU,EAAsB,CAC3BC,QAJe,WAKfN,aAJoB,iBAKpBO,cAJqB,6CAShBC,EAA4B,MAChC7D,WAAAA,CAAYC,IACVC,EAAAA,EAAAA,GAAiBC,KAAMF,GACvBE,KAAK2D,4BAA6BzD,EAAAA,EAAAA,GAAYF,KAAM,6BAA8B,GAClFA,KAAKkD,aAAe,EACtB,CACAU,YAAAA,CAAaC,GACXA,EAAMC,kBACN,MAAMC,EAAuBhD,SAASf,KAAKgE,gBAAgBlD,MAAO,IAClEd,KAAK2D,2BAA2BnD,KAAKuD,EACvC,CACA,uBAAM5B,GACJnC,KAAK6B,WAAaO,EAAAA,EAAAA,GAAsBpC,KAAKqC,KAAMkB,EACrD,CACAU,WAAAA,GACE,OAAQ1C,EAAAA,EAAAA,GAAE,eAAgB,CAAES,IAAKkC,GAAOlE,KAAKgE,gBAAkBE,EAAKpD,MAAO,GAAFQ,OAAKtB,KAAKkD,cAAgB,aAAclD,KAAK6B,KAAK,gBAAiB,CACxIsC,MAAOnE,KAAKkD,iBACR3B,EAAAA,EAAAA,GAAE,cAAe,CAAE,aAAcvB,KAAK6B,KAAK,kBAAmBN,EAAAA,EAAAA,GAAE,aAAc,CAAET,MAAO,MAAQ,OAAOS,EAAAA,EAAAA,GAAE,aAAc,CAAET,MAAO,MAAQ,OAAOS,EAAAA,EAAAA,GAAE,aAAc,CAAET,MAAO,MAAQ,OAAOS,EAAAA,EAAAA,GAAE,aAAc,CAAET,MAAO,OAAS,QAClO,CACAwB,MAAAA,GACE,OAAQf,EAAAA,EAAAA,GAAE,MAAO,CAAEC,MAAO,4CAA6CD,EAAAA,EAAAA,GAAE,MAAO,CAAEC,MAAO,wCAA0CxB,KAAKiE,gBAAgB1C,EAAAA,EAAAA,GAAE,MAAO,KAAMvB,KAAK6B,KAAK,YACnL,CACA,QAAIQ,GAAS,OAAOO,EAAAA,EAAAA,GAAW5C,KAAO,GAExC0D,EAA0Bb,MA1BW,qoB","sources":["../node_modules/genesys-spark-components/dist/esm/gux-pagination-buttons_3.entry.js"],"sourcesContent":["import { r as registerInstance, c as createEvent, h, g as getElement } from './index-816e34d8.js';\nimport { b as buildI18nForComponent } from './index-992b023e.js';\nimport './get-closest-element-1597503c.js';\n\nconst page = \"Page\";\nconst totalPages = \" of {totalPages, number}\";\nconst first = \"First\";\nconst previous = \"Previous\";\nconst next = \"Next\";\nconst last = \"Last\";\nconst pageInputLabel = \"Page {currentPage, number} of {totalPages, number}\";\nconst paginationResources$2 = {\n\tpage: page,\n\ttotalPages: totalPages,\n\tfirst: first,\n\tprevious: previous,\n\tnext: next,\n\tlast: last,\n\tpageInputLabel: pageInputLabel\n};\n\nclass GuxPaginationButtonsService {\n  static getPageList(currentPage, totalPages) {\n    if (totalPages <= 10) {\n      return [...Array(totalPages).keys()].map(index => {\n        const pageNumber = index + 1;\n        return {\n          pageNumber,\n          display: String(pageNumber),\n          current: pageNumber === currentPage\n        };\n      });\n    }\n    if (currentPage <= 5) {\n      const startPageList = [...Array(6).keys()].map(index => {\n        const pageNumber = index + 1;\n        return {\n          pageNumber,\n          display: String(pageNumber),\n          current: pageNumber === currentPage\n        };\n      });\n      return [\n        ...startPageList,\n        {\n          pageNumber: 7,\n          display: '...',\n          current: false\n        },\n        {\n          pageNumber: totalPages,\n          display: String(totalPages),\n          current: false\n        }\n      ];\n    }\n    if (currentPage > totalPages - 5) {\n      const endPageList = [...Array(6).keys()].map(index => {\n        const pageNumber = index + totalPages - 5;\n        return {\n          pageNumber,\n          display: String(pageNumber),\n          current: pageNumber === currentPage\n        };\n      });\n      return [\n        {\n          pageNumber: 1,\n          display: '1',\n          current: false\n        },\n        {\n          pageNumber: totalPages - 6,\n          display: '...',\n          current: false\n        },\n        ...endPageList\n      ];\n    }\n    const middlePageList = [...Array(5).keys()].map(index => {\n      const pageNumber = index + currentPage - 2;\n      return {\n        pageNumber,\n        display: String(pageNumber),\n        current: pageNumber === currentPage\n      };\n    });\n    return [\n      {\n        pageNumber: 1,\n        display: '1',\n        current: false\n      },\n      {\n        pageNumber: currentPage - 3,\n        display: '...',\n        current: false\n      },\n      ...middlePageList,\n      {\n        pageNumber: currentPage + 3,\n        display: '...',\n        current: false\n      },\n      {\n        pageNumber: totalPages,\n        display: String(totalPages),\n        current: false\n      }\n    ];\n  }\n}\n\nconst guxPaginationButtonsCss = \"gux-pagination-buttons{color:#2e394c}gux-pagination-buttons .gux-pagination-buttons-container{display:flex;flex-direction:row;flex-wrap:nowrap;align-content:stretch;align-items:center;justify-content:flex-end}gux-pagination-buttons .gux-pagination-buttons-container.gux-expanded{justify-content:center}gux-pagination-buttons .gux-pagination-buttons-container>div{flex:0 1 auto;align-self:auto;order:0}gux-pagination-buttons .gux-pagination-buttons-container .gux-pagination-buttons-group{white-space:nowrap}gux-pagination-buttons .gux-pagination-buttons-container .gux-pagination-buttons-group gux-button-slot-beta:not(:first-of-type){margin-left:4px}gux-pagination-buttons .gux-pagination-buttons-container .gux-pagination-buttons-input-container{display:flex;flex-direction:row;flex-wrap:nowrap;align-content:stretch;align-items:center;justify-content:center;margin:0 16px}gux-pagination-buttons .gux-pagination-buttons-container .gux-pagination-buttons-input-container>div{flex:0 1 auto;align-self:auto;order:0;white-space:nowrap}gux-pagination-buttons .gux-pagination-buttons-container .gux-pagination-buttons-input-container .gux-pagination-buttons-input{width:60px;margin:0 8px}gux-pagination-buttons .gux-pagination-buttons-container .gux-pagination-buttons-input-container .gux-pagination-buttons-input input{width:60px;text-align:center;background:transparent}gux-pagination-buttons .gux-pagination-buttons-container .gux-pagination-buttons-list-container{display:flex;flex-direction:row;flex-wrap:nowrap;align-content:stretch;align-items:center;justify-content:center;margin:0 16px}gux-pagination-buttons .gux-pagination-buttons-container .gux-pagination-buttons-list-container .gux-pagination-buttons-list-button{height:32px;padding:0 4px;margin:0 4px;background:inherit;border:none;border-radius:2px}gux-pagination-buttons .gux-pagination-buttons-container .gux-pagination-buttons-list-container .gux-pagination-buttons-list-button:focus-visible{outline:3px solid #aac9ff;outline-offset:1px;box-shadow:0 0 0 1px #fdfdfd}gux-pagination-buttons .gux-pagination-buttons-container .gux-pagination-buttons-list-container .gux-pagination-buttons-list-button.gux-current{font-weight:600}gux-pagination-buttons .gux-pagination-buttons-container .gux-pagination-buttons-list-container .gux-pagination-buttons-list-button.gux-target{color:#2a60c8;cursor:pointer}gux-pagination-buttons .gux-pagination-buttons-container .gux-pagination-buttons-spacer{width:12px}\";\n\nconst GuxPaginationButtons = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.internalcurrentpagechange = createEvent(this, \"internalcurrentpagechange\", 3);\n    this.currentPage = undefined;\n    this.totalPages = undefined;\n    this.layout = 'full';\n  }\n  get onFirstPage() {\n    return this.currentPage <= 1;\n  }\n  get onLastPage() {\n    return this.currentPage >= this.totalPages;\n  }\n  handleClickFirst() {\n    this.internalcurrentpagechange.emit(1);\n  }\n  handleClickPrevious() {\n    this.internalcurrentpagechange.emit(this.currentPage - 1);\n  }\n  handleClickNext() {\n    this.internalcurrentpagechange.emit(this.currentPage + 1);\n  }\n  handleClickLast() {\n    this.internalcurrentpagechange.emit(this.totalPages);\n  }\n  handleClickPage(pageNumber) {\n    this.internalcurrentpagechange.emit(pageNumber);\n  }\n  setPageFromInput(value) {\n    const page = parseInt(value, 10);\n    if (!page || isNaN(page)) {\n      this.textFieldRef.value = String(this.currentPage);\n    }\n    else {\n      this.internalcurrentpagechange.emit(page);\n    }\n  }\n  getPageListEnteries(currentPage, totalPages) {\n    return GuxPaginationButtonsService.getPageList(currentPage, totalPages).reduce((acc, cv) => {\n      if (cv.current) {\n        return acc.concat((h(\"button\", { class: \"gux-pagination-buttons-list-button gux-current\" }, cv.display)));\n      }\n      return acc.concat((h(\"button\", { class: \"gux-pagination-buttons-list-button gux-target\", onClick: () => this.handleClickPage(cv.pageNumber) }, cv.display)));\n    }, []);\n  }\n  getSmallPagePicker() {\n    return (h(\"div\", { class: 'gux-pagination-buttons-spacer' }));\n  }\n  getExpandedPagePicker() {\n    return (h(\"div\", { class: \"gux-pagination-buttons-list-container\" }, this.getPageListEnteries(this.currentPage, this.totalPages)));\n  }\n  getFullPagePicker() {\n    return (h(\"div\", { class: \"gux-pagination-buttons-input-container\" }, h(\"div\", null, this.i18n('page')), h(\"div\", { class: \"gux-pagination-buttons-input\" }, h(\"gux-form-field-text-like\", { \"label-position\": \"screenreader\" }, h(\"label\", { slot: \"label\" }, this.i18n('pageInputLabel', {\n      currentPage: this.currentPage,\n      totalPages: this.totalPages\n    })), h(\"input\", { type: \"text\", slot: \"input\", value: String(this.currentPage), ref: ref => (this.textFieldRef = ref), onChange: () => this.setPageFromInput(this.textFieldRef.value) }))), h(\"div\", null, this.i18n('totalPages', { totalPages: this.totalPages }))));\n  }\n  getPagePicker(layout) {\n    if (layout === 'small') {\n      return this.getSmallPagePicker();\n    }\n    if (layout === 'expanded') {\n      return this.getExpandedPagePicker();\n    }\n    return this.getFullPagePicker();\n  }\n  async componentWillLoad() {\n    this.i18n = await buildI18nForComponent(this.root, paginationResources$2);\n  }\n  render() {\n    return (h(\"div\", { class: `gux-pagination-buttons-container gux-${this.layout}` }, h(\"div\", { class: \"gux-pagination-buttons-group\" }, h(\"gux-button-slot-beta\", { accent: \"secondary\" }, h(\"button\", { title: this.i18n('first'), disabled: this.onFirstPage, onClick: this.handleClickFirst.bind(this) }, h(\"gux-icon\", { decorative: true, \"icon-name\": \"chevron-double-left\" }))), h(\"gux-button-slot-beta\", { accent: \"secondary\" }, h(\"button\", { title: this.i18n('previous'), disabled: this.onFirstPage, onClick: this.handleClickPrevious.bind(this) }, h(\"gux-icon\", { decorative: true, \"icon-name\": \"chevron-small-left\" })))), this.getPagePicker(this.layout), h(\"div\", { class: \"gux-pagination-buttons-group\" }, h(\"gux-button-slot-beta\", { accent: \"secondary\" }, h(\"button\", { title: this.i18n('next'), disabled: this.onLastPage, onClick: this.handleClickNext.bind(this) }, h(\"gux-icon\", { decorative: true, \"icon-name\": \"chevron-small-right\" }))), h(\"gux-button-slot-beta\", { accent: \"secondary\" }, h(\"button\", { title: this.i18n('last'), disabled: this.onLastPage, onClick: this.handleClickLast.bind(this) }, h(\"gux-icon\", { decorative: true, \"icon-name\": \"chevron-double-right\" }))))));\n  }\n  get root() { return getElement(this); }\n};\nGuxPaginationButtons.style = guxPaginationButtonsCss;\n\nconst itemCountDisplay = \"{firstItem, number} - {lastItem, number}\";\nconst totalItems = \" of {totalItems, number}\";\nconst paginationResources$1 = {\n\titemCountDisplay: itemCountDisplay,\n\ttotalItems: totalItems\n};\n\nconst guxPaginationItemCountsCss = \"gux-pagination-item-counts{color:#2e394c}gux-pagination-item-counts .gux-pagination-item-counts-container{white-space:nowrap}gux-pagination-item-counts .gux-pagination-item-counts-container .gux-pagination-item-counts-range{font-weight:bold}\";\n\nconst GuxPaginationItemCounts = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.totalItems = 0;\n    this.currentPage = 0;\n    this.itemsPerPage = 25;\n  }\n  get firstItem() {\n    if (this.totalItems < 1) {\n      return 0;\n    }\n    return (this.currentPage - 1) * this.itemsPerPage + 1;\n  }\n  get lastItem() {\n    if (this.totalItems < 1) {\n      return 0;\n    }\n    return Math.min(this.currentPage * this.itemsPerPage, this.totalItems);\n  }\n  async componentWillLoad() {\n    this.i18n = await buildI18nForComponent(this.root, paginationResources$1);\n  }\n  render() {\n    return (h(\"div\", { class: \"gux-pagination-item-counts-container\" }, h(\"span\", { class: \"gux-pagination-item-counts-range\" }, this.i18n('itemCountDisplay', {\n      firstItem: this.firstItem,\n      lastItem: this.lastItem\n    })), h(\"span\", null, this.i18n('totalItems', { totalItems: this.totalItems }))));\n  }\n  get root() { return getElement(this); }\n};\nGuxPaginationItemCounts.style = guxPaginationItemCountsCss;\n\nconst perPage = \"per page\";\nconst itemsPerPage = \"Items per page\";\nconst rangeSelected = \"Items per page dropdown, {range} selected\";\nconst paginationResources = {\n\tperPage: perPage,\n\titemsPerPage: itemsPerPage,\n\trangeSelected: rangeSelected\n};\n\nconst guxPaginationItemsPerPageCss = \"gux-pagination-items-per-page{color:#2e394c}gux-pagination-items-per-page .gux-pagination-items-per-page-container{display:flex;flex-direction:row;flex-wrap:nowrap;align-content:stretch;align-items:center;justify-content:center}gux-pagination-items-per-page .gux-pagination-items-per-page-container>div{flex:0 1 auto;align-self:auto;order:0;white-space:nowrap}gux-pagination-items-per-page .gux-pagination-items-per-page-container .gux-pagination-items-per-page-picker{margin:0 8px 0 16px}gux-pagination-items-per-page .gux-pagination-items-per-page-container .gux-pagination-items-per-page-picker gux-dropdown{display:inline-block;width:64px}\";\n\nconst GuxPaginationItemsPerPage = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.internalitemsperpagechange = createEvent(this, \"internalitemsperpagechange\", 3);\n    this.itemsPerPage = 25;\n  }\n  handleChange(event) {\n    event.stopPropagation();\n    const newItemsPerPageValue = parseInt(this.dropdownElement.value, 10);\n    this.internalitemsperpagechange.emit(newItemsPerPageValue);\n  }\n  async componentWillLoad() {\n    this.i18n = await buildI18nForComponent(this.root, paginationResources);\n  }\n  getDropdown() {\n    return (h(\"gux-dropdown\", { ref: el => (this.dropdownElement = el), value: `${this.itemsPerPage}`, \"aria-label\": this.i18n('rangeSelected', {\n        range: this.itemsPerPage\n      }) }, h(\"gux-listbox\", { \"aria-label\": this.i18n('itemsPerPage') }, h(\"gux-option\", { value: \"25\" }, \"25\"), h(\"gux-option\", { value: \"50\" }, \"50\"), h(\"gux-option\", { value: \"75\" }, \"75\"), h(\"gux-option\", { value: \"100\" }, \"100\"))));\n  }\n  render() {\n    return (h(\"div\", { class: \"gux-pagination-items-per-page-container\" }, h(\"div\", { class: \"gux-pagination-items-per-page-picker\" }, this.getDropdown()), h(\"div\", null, this.i18n('perPage'))));\n  }\n  get root() { return getElement(this); }\n};\nGuxPaginationItemsPerPage.style = guxPaginationItemsPerPageCss;\n\nexport { GuxPaginationButtons as gux_pagination_buttons, GuxPaginationItemCounts as gux_pagination_item_counts, GuxPaginationItemsPerPage as gux_pagination_items_per_page };\n"],"names":["paginationResources$2","page","totalPages","first","previous","next","last","pageInputLabel","GuxPaginationButtonsService","getPageList","currentPage","Array","keys","map","index","pageNumber","display","String","current","endPageList","middlePageList","GuxPaginationButtons","constructor","hostRef","registerInstance","this","internalcurrentpagechange","createEvent","undefined","layout","onFirstPage","onLastPage","handleClickFirst","emit","handleClickPrevious","handleClickNext","handleClickLast","handleClickPage","setPageFromInput","value","parseInt","isNaN","textFieldRef","getPageListEnteries","reduce","acc","cv","concat","h","class","onClick","getSmallPagePicker","getExpandedPagePicker","getFullPagePicker","i18n","slot","type","ref","onChange","getPagePicker","componentWillLoad","buildI18nForComponent","root","render","accent","title","disabled","bind","decorative","getElement","style","paginationResources$1","itemCountDisplay","totalItems","GuxPaginationItemCounts","itemsPerPage","firstItem","lastItem","Math","min","paginationResources","perPage","rangeSelected","GuxPaginationItemsPerPage","internalitemsperpagechange","handleChange","event","stopPropagation","newItemsPerPageValue","dropdownElement","getDropdown","el","range"],"sourceRoot":""}